interface OpenRouterMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface OpenRouterRequest {
  model: string;
  messages: OpenRouterMessage[];
  temperature?: number;
  max_tokens?: number;
}

interface OpenRouterResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

interface SmartFormData {
  employee_id: string | null;
  full_name: string | null;
  position: string | null;
  department: string | null;
  division: string | null;
  unit: string | null;
  phone: string | null;
  email: string | null;
  doc_ref_no: string | null;
  doc_date: string | null;
  subject: string | null;
  equipment_type: string | null;
  quantity: string | null;
  purpose: string | null;
  start_datetime: string | null;
  end_datetime: string | null;
  install_location: string | null;
  default_software: boolean;
  extra_software_choice: string;
  extra_software_name: string | null;
  coordinator: string | null;
  coordinator_phone: string | null;
  receiver: string | null;
  receive_datetime: string | null;
  remark: string | null;
  attachment: string | null;
}

const getApiKey = (): string | null => {
  return localStorage.getItem('or_key') || import.meta.env.VITE_OPENROUTER_API_KEY || null;
};

// ‚úÖ Enhanced JSON extraction helper
const extractJson = (raw: string): any => {
  try {
    // ‡∏´‡∏≤ JSON block ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const match = raw.match(/\{[\s\S]*\}/);
    if (match) {
      const parsed = JSON.parse(match[0]);
      return typeof parsed === 'object' ? parsed : {};
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ JSON ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á parse ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const parsed = JSON.parse(raw.trim());
    return typeof parsed === 'object' ? parsed : {};
  } catch (error) {
    console.error('Failed to extract JSON:', error);
    return {};
  }
};

export async function chatOpenRouter(messages: OpenRouterMessage[]): Promise<string> {
  const API_KEY = getApiKey();
  
  if (!API_KEY) {
    throw new Error('Missing OpenRouter API key');
  }

  const ctrl = new AbortController();
  const timeoutId = setTimeout(() => ctrl.abort(), 30000);

  try {
    const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
        'User-Agent': 'SmartFormAssistant/2.0'
      },
      body: JSON.stringify({
        model: 'qwen/qwen2.5-72b-instruct',
        messages,
        temperature: 0.1,
        max_tokens: 2000,
      } as OpenRouterRequest),
      signal: ctrl.signal
    });

    clearTimeout(timeoutId);

    if (!res.ok) {
      throw new Error(`OpenRouter API error: ${res.status}`);
    }

    const data: OpenRouterResponse = await res.json();
    return data.choices[0]?.message?.content || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
  } catch (error) {
    clearTimeout(timeoutId);
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
    throw error;
  }
}

class OpenRouterService {
  private getCurrentDateTime(): string {
    return "2025-06-22T14:00:00+07:00";
  }

  private getFormStructure(): SmartFormData {
    return {
      employee_id: null,
      full_name: null,
      position: null,
      department: null,
      division: null,
      unit: null,
      phone: null,
      email: null,
      doc_ref_no: null,
      doc_date: null,
      subject: null,
      equipment_type: null,
      quantity: null,
      purpose: null,
      start_datetime: null,
      end_datetime: null,
      install_location: null,
      default_software: false,
      extra_software_choice: "no",
      extra_software_name: null,
      coordinator: null,
      coordinator_phone: null,
      receiver: null,
      receive_datetime: null,
      remark: null,
      attachment: null
    };
  }

  private getRequiredFields(): string[] {
    return [
      'phone', 'subject', 'equipment_type', 'quantity', 'purpose',
      'start_datetime', 'end_datetime', 'install_location', 
      'coordinator', 'coordinator_phone', 'receive_datetime'
    ];
  }

  setApiKey(apiKey: string) {
    localStorage.setItem('or_key', apiKey);
  }

  async chat(messages: OpenRouterMessage[], timeout: number = 30000): Promise<string> {
    return chatOpenRouter(messages);
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏™‡∏°‡∏≠
  async parseEquipmentRequest(text: string, language: 'th' | 'en'): Promise<SmartFormData> {
    const currentDateTime = this.getCurrentDateTime();
    
    const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (Smart Form Assistant v3.0) ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå" ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

**‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å:** ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° JSON ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

**CURRENT_DATETIME ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤:** ${currentDateTime}
‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠: ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 22 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2025 ‡πÄ‡∏ß‡∏•‡∏≤ 14:00 ‡∏ô.

**‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å):**

1. **‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ** = 2025-06-23 (‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
2. **‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤** = 2025-06-27 (‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤)
3. **‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤** = 2025-06-28 (‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤)
4. **‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏´‡∏ô‡πâ‡∏≤** = 2025-06-29 (‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏´‡∏ô‡πâ‡∏≤)
5. **‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤** = 2025-06-30 (‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤)

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤:**
- "13:00-15:00" ‚Üí start: "2025-06-27T13:00", end: "2025-06-27T15:00"
- "9 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á" ‚Üí start: "2025-06-27T09:00", end: "2025-06-27T12:00"
- "‡∏ö‡πà‡∏≤‡∏¢‡πÇ‡∏°‡∏á‡∏ñ‡∏∂‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏°" ‚Üí start: "2025-06-27T13:00", end: "2025-06-27T15:00"
- "‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡πâ‡∏≤‡πÇ‡∏°‡∏á" ‚Üí start: "2025-06-27T09:00"

**Equipment Types ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**
- ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å/‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ/‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‚Üí "Notebook"
- ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢ ‚Üí "Projector"  
- ‡∏´‡∏±‡∏ö/‡∏Æ‡∏±‡∏ö ‚Üí "Hub"
- ‡πÄ‡∏°‡∏≤‡∏™‡πå ‚Üí "Mouse"
- ‡∏à‡∏≠/‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‚Üí "Monitor"
- ‡∏î‡∏≠‡∏Å/dock ‚Üí "Dock"
- ‡∏Æ‡∏≤‡∏£‡πå‡∏î‡∏î‡∏¥‡∏™‡∏Å‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‚Üí "External HDD"
- ‡∏™‡∏≤‡∏¢ HDMI ‚Üí "HDMI Adapter"
- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚Üí "Other"

üõë CRITICAL: Respond ONLY with a raw JSON object, without markdown or explanation.

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Input/Output:**
Input: "‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ß‡∏•‡∏≤ 13:00-15:00 ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô 2"
Output:
{
  "equipment_type": "Projector",
  "quantity": "1",
  "start_datetime": "2025-06-27T13:00",
  "end_datetime": "2025-06-27T15:00",
  "install_location": "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô 2",
  "purpose": "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
  "subject": "‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå",
  "employee_id": null,
  "full_name": null,
  "position": null,
  "department": null,
  "division": null,
  "unit": null,
  "phone": null,
  "email": null,
  "doc_ref_no": null,
  "doc_date": null,
  "default_software": false,
  "extra_software_choice": "no",
  "extra_software_name": null,
  "coordinator": null,
  "coordinator_phone": null,
  "receiver": null,
  "receive_datetime": null,
  "remark": null,
  "attachment": null
}`;

    const messages: OpenRouterMessage[] = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: text }
    ];

    try {
      const response = await this.chat(messages);
      console.log('Raw AI Response for parsing:', response);
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ extractJson helper ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ object
      const parsedData = extractJson(response);
      console.log('Successfully parsed JSON:', parsedData);
      
      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà merge ‡∏Å‡∏±‡∏ö default structure
      return { ...this.getFormStructure(), ...parsedData };
    } catch (error) {
      console.error('Error parsing equipment request:', error);
      return this.getFormStructure();
    }
  }

  validateFormData(formData: SmartFormData): string[] {
    const missingFields: string[] = [];
    const requiredFields = this.getRequiredFields();

    requiredFields.forEach(field => {
      const value = formData[field as keyof SmartFormData];
      if (!value || value === null || value === '') {
        missingFields.push(field);
      }
    });

    return missingFields;
  }

  async generateResponse(userMessage: string, language: 'th' | 'en', isRequest: boolean): Promise<string> {
    if (!isRequest) {
      // ... keep existing code (general conversation handling)
      const systemPrompt = language === 'th'
        ? `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•
        
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö`
        : `You are a Smart Form Assistant for computer equipment borrowing at Faculty of Medicine Siriraj Hospital, Mahidol University.

Please respond in English with a professional, formal tone without emojis.
For general conversation, respond politely and helpfully.`;

      const messages: OpenRouterMessage[] = [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userMessage }
      ];

      try {
        return await this.chat(messages);
      } catch (error) {
        console.error('Error generating response:', error);
        return language === 'th' 
          ? '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          : 'Sorry, there was an error processing your request. Please try again.';
      }
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö equipment request - ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
    return language === 'th'
      ? '‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠'
      : 'Form has been updated successfully. Please review and submit your request.';
  }

  detectLanguage(text: string): 'th' | 'en' {
    const thaiChars = text.match(/[\u0E00-\u0E7F]/g) || [];
    const englishWords = text.match(/[a-zA-Z]+/g) || [];
    return thaiChars.length > englishWords.length ? 'th' : 'en';
  }

  isEquipmentRequest(text: string): boolean {
    // ... keep existing code (request detection logic)
    const lowerText = text.toLowerCase();
    
    const thaiRequestKeywords = [
      '‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', '‡∏¢‡∏∑‡∏°', '‡∏Ç‡∏≠', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', '‡∏à‡∏≠‡∏á', '‡∏Ç‡∏≠‡∏à‡∏≠‡∏á',
      '‡πÉ‡∏ä‡πâ', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ', '‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ'
    ];
    
    const englishRequestKeywords = [
      'borrow', 'want to borrow', 'need', 'request', 'book', 'reserve',
      'use', 'want to use', 'need to use', 'can i', 'could i', 'may i'
    ];
    
    const equipmentKeywords = [
      '‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å', '‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ', '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', 'notebook', 'laptop', 'computer',
      '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢', 'projector',
      '‡∏´‡∏±‡∏ö', '‡∏Æ‡∏±‡∏ö', 'hub',
      '‡πÄ‡∏£‡∏≤‡∏ó‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå', 'router',
      '‡πÄ‡∏°‡∏≤‡∏™‡πå', 'mouse',
      '‡∏à‡∏≠', '‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå', 'monitor', 'screen',
      'dock', 'hdd', 'hdmi'
    ];
    
    const hasRequestKeyword = thaiRequestKeywords.some(keyword => text.includes(keyword)) ||
                             englishRequestKeywords.some(keyword => lowerText.includes(keyword));
    
    const hasEquipmentKeyword = equipmentKeywords.some(keyword => 
      lowerText.includes(keyword.toLowerCase())
    );
    
    return hasRequestKeyword && hasEquipmentKeyword;
  }
}

export const openRouterService = new OpenRouterService();
